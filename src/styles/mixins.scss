//MIXINS

//REM AND PX FONT SIZE
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

//@include font-size(13px);

//PSEUDO
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}
//@include pseudo;

//CENTER VERTICAL & HORIZONTAL
@mixin center-me() {
  left: 50%;
  top: 50%;
  transform: translateX(-50%) translateY(-50%);
}

//@include center-me;

//CENTER HORIZONTAL
@mixin center-h() {
  left: 50%;
  transform: translateX(-50%);
}

//@include center-h();

//CENTER VERTICAL
@mixin center-v() {
  top: 50%;
  transform: translateY(-50%);
}

//@include center-v();

//INPUT PLACEHOLDER
@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

//input {
//    @include input-placeholder {
//        color: grey;
//    }
//}

//Visually hide an element
%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//.visually-hidden {
//  @extend %visuallyhidden;
//}

//display flex
@mixin df() {
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  justify-content: center;
  align-items: center;
}

//@include df;

/// Select all children from the first to `$num`.
/// @group with-arguments
/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]
/// @param {number} $num - id of the child
@mixin first($num) {
  @if $num == 1 {
    &:first-child {
      @content;
    }
  } @else {
    &:nth-child(-n + #{$num}) {
      @content;
    }
  }
}

/// Create media query below horizontal breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $max-breakpoint - Max horizontal breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-below("max-breakpoint") {
///       property: value;
///     }
///   }
@mixin media-below($max-breakpoint) {
  $max-width: (get-breakpoint("horizontal", $max-breakpoint));
  @media screen and (max-width: $max-width) {
    @content;
  }
}

/// Create media query above horizontal breakpoint
/// ---
/// @require {variable} $breakpoints - Breakpoints
/// @param {String} $min-breakpoint - Min horizontal breakpoint
/// ---
/// @example scss - Usage
///   selector {
///     @include media-above("min-breakpoint") {
///       property: value;
///     }
///   }

@mixin media-above($min-breakpoint) {
  $min-width: get-breakpoint("horizontal", $min-breakpoint);
  @media screen and (min-width: $min-width) {
    @content;
  }
}

/// Create media query for high density displays
/// ---
/// @example scss - Usage
///   selector {
///     background-image: url("/path/file.png");
///
///     @mixin media-hd() {
///       background-image: url("/path/file@2x.png");
///     }
///   }

@mixin media-hd() {
  @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx) {
    @content;
  }
}

/// Create media query for ultra high density displays
/// ---
/// @example scss - Usage
///   selector {
///     background-image: url("/path/file.png");
///
///     @mixin media-hd() {
///       background-image: url("/path/file@3x.png");
///     }
///   }

@mixin media-uhd() {
  @media (-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx) {
    @content;
  }
}
